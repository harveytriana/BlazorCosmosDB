@page "/Books"
@inject HttpClient _http
@inject NavigationManager _navigation
@inject IJSRuntime _jsRuntime

<h3 style="color:darkgoldenrod">Books Collection</h3>
<hr />
@if (items == null) {
    <h6>@echo</h6>
}
else {
    <table class="table">
        <thead>
            <tr>
                <td>Title</td>
                <td>Author</td>
                <td>Language</td>
                <td>Year</td>
                <td>Link</td>
                <td>Action</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var b in items) {
                <tr>
                    <td>@b.Title</td>
                    <td>@b.Author</td>
                    <td>@b.Language</td>
                    <td>@b.Year</td>
                    <td>
                        <span style="@LinkStyle(b.Link);"
                              @onclick="() => OpenLink(b.Link)">Moore...</span>
                    </td>
                    <td nowrap>
                        <span style="cursor:pointer;color:goldenrod"
                              @onclick="@(e => OnEdit(b.ISBN, b.Partition))" class="oi oi-pencil"></span>
                        <span style="cursor:pointer;color:salmon"
                              @onclick="@(e => OnDelete(b.ISBN))" class="oi oi-trash"></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    if (items.Count == 0) {
        <h6 style="cursor:pointer;color:goldenrod"
            @onclick="@SeedData" class="oi oi-pencil">
            Add Data Sample
        </h6>
    }
    <hr />
    <a href="BookEditor" style="font-size:16px;"><i class="oi oi-book"></i> Add Book</a>
}

@code {
    List<Book> items;
    string apiRoot = "api/books/";
    string echo;

    protected override async Task OnInitializedAsync()
    {
        echo = "Queryinhg database...";
        try {
            items = await _http.GetFromJsonAsync<List<Book>>(apiRoot);
        }
        catch (Exception exception) {
            echo = "Exception: " + exception.Message;
        }
    }

    void OnEdit(string id, string partition)
    {
        _navigation.NavigateTo($"BookEditor/{id}/{partition}");
    }

    void OnCreate()
    {
        _navigation.NavigateTo($"BookEditor/");
    }

    async Task OnDelete(string id)
    {
        items.Remove(items.Find(x => x.ISBN == id));
        // update database
        await _http.DeleteAsync($"api/book/{id}");
    }

    async Task OpenLink(string link)
    {
        if (string.IsNullOrEmpty(link) == false) {
            await _jsRuntime.InvokeVoidAsync("open", link, "_blank");
        }
    }

    string LinkStyle(string link)
    {
        if (string.IsNullOrEmpty(link)) return "gray;";
        return "cursor:pointer;color:darkgoldenrod;";
    }

    async Task SeedData()
    {
        echo = "Queryinhg database...";
        try {
            items = await _http.GetFromJsonAsync<List<Book>>(apiRoot + "SeedData");
        }
        catch (Exception exception) {
            echo = "Exception: " + exception.Message;
        }
    }
}